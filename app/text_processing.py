import os
import requests

GEMINI_API_KEY = os.getenv("GOOGLE_API_KEY") or "AIzaSyBVzPQY8m7wg1iweqE2ZMXHyF0I_0NaXxs"
ENDPOINT = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"

GEMINI_PROMPT = """
Tu es un assistant intelligent sp√©cialis√© en r√©daction de comptes rendus de r√©union. Tu fait de la transcription pour Junior ISEP une Junior-Entreprise dans le domaine du num√©rique.

Tu re√ßois une transcription brute (pas toujours proprement r√©dig√©e) d'une r√©union d'√©quipe, cette transcription provient de whisper (elle n'est donc pas toujours tr√®s clair mais essaye de devenir le contexte et de faire √ßa de mani√®re intelligente). Ton objectif est de :

1. Identifier les diff√©rentes parties ou sujets abord√©s (m√™me si "ODJ" n‚Äôest pas dit clairement), parfois tu aura des DJI ou des mots un peu bizarre √† la place d'ODJ dont tu peux te servir pour voir √©galement les diff√©rents ODJ.
2. Donner un **titre clair et concis** √† chaque partie, tu dois te limiter √† 3 √† 5 mots pour les titres des ODJ.
3. Fournir un **r√©sum√© clair** de chaque sujet (4-6 phrases max). Tu peux enfaire moins ou plus si n√©cessaire, le but √©tant de garder l'essentiel de ce qui a √©t√© dit et les √©l√©ments les plus importants.
4. Ne surtout pas utiliser du style markdown comme des "**" pour les titres et le contenu car sinon apr√®s mon code ne peut pas le lire pour les titres et le contenu (c'est tr√®s important)
5. Afficher obligatoirement les r√©sultats sous forme lisible, comme : 

ODJ 1 ‚Äî [Titre clair du point] 
R√©sum√© : [r√©sum√© du contenu]

ODJ 2 ‚Äî ...

Vocubulaire √† avoir : les mots commme "th√®me" ou qui ont une sonorit√© similaire et que tu trouves bizarres font r√©f√©rence √† "TM" qui est une r√©union hebdomadaire des Chefs de Projets
les mots comme "le Dit Saint-Joseph" ou qui ont une sonorit√© similaire et que tu trouves bizarres font r√©f√©rence √† "Audit CNJE" qui est un audit par la Conf√©d√©ration Nationale des Junior-Entreprise
Tu dois utiliser le pass√© compos√© pour le contenu et des formulations du Style "Il a √©t√© rappel√©, Il a √©t√© annonc√©, etc..." 
Voici la transcription :
{transcription}
"""

def process_transcription(transcription_txt_path: str, segments_output_path: str):
    """
    Lit la transcription depuis un fichier texte, utilise Gemini via REST API pour structurer les segments ODJ,
    puis √©crit le r√©sultat dans un fichier segments_output_path.
    """
    with open(transcription_txt_path, "r", encoding="utf-8") as f:
        transcription = f.read()

    prompt = GEMINI_PROMPT.format(transcription=transcription)

    headers = {
        "Content-Type": "application/json",
    }

    payload = {
        "contents": [
            {
                "parts": [{"text": prompt}]
            }
        ]
    }

    response = requests.post(ENDPOINT, headers=headers, json=payload)
    if response.status_code != 200:
        raise Exception(f"Erreur API Gemini: {response.status_code} - {response.text}")

    data = response.json()
    segments_text = data["candidates"][0]["content"]["parts"][0]["text"].strip()

    with open(segments_output_path, "w", encoding="utf-8") as f:
        f.write(segments_text)

    print(f"üìÑ Segments ODJ enregistr√©s dans {segments_output_path}")

